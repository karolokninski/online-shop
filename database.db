CREATE TABLE addresses (
  id SERIAL PRIMARY KEY,
  address_line VARCHAR(255) NOT NULL,
  postal_code VARCHAR(20) NOT NULL,
  city VARCHAR(100) NOT NULL,
  country VARCHAR(100) NOT NULL
);

CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50),
  email VARCHAR(100) NOT NULL UNIQUE,
  phone VARCHAR(20),
  hashed_password VARCHAR(100) NOT NULL,
  address_id INT DEFAULT NULL,
  role VARCHAR(20) NOT NULL DEFAULT 'user',
  note TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_users_address FOREIGN KEY (address_id) REFERENCES addresses(id)
);

CREATE TABLE password_reset_tokens (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  reset_token VARCHAR(6) NOT NULL,
  token_expiration TIMESTAMP NOT NULL,
  CONSTRAINT fk_password_reset_tokens_user FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE product_categories (
  id SERIAL PRIMARY KEY,
  category_name VARCHAR(100) NOT NULL,
  parent_category_id INT,
  description TEXT,
  CONSTRAINT fk_product_categories_parent FOREIGN KEY (parent_category_id) REFERENCES product_categories(id)
);

CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  product_name VARCHAR(150) NOT NULL,
  category_id INT,
  price DECIMAL(10, 2) NOT NULL,
  stock_quantity INT DEFAULT 0,
  description TEXT,
  main_image BYTEA,
  additional_images BYTEA[],
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_products_category FOREIGN KEY (category_id) REFERENCES product_categories(id)
);

CREATE TABLE product_parameters (
  id SERIAL PRIMARY KEY,
  parameter_name VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE parameter_values (
  id SERIAL PRIMARY KEY,
  parameter_id INT,
  value TEXT NOT NULL,
  UNIQUE (parameter_id, value),
  CONSTRAINT fk_parameter_values_parameter FOREIGN KEY (parameter_id) REFERENCES product_parameters(id)
);

CREATE TABLE product_parameter_values (
  id SERIAL PRIMARY KEY,
  product_id INT,
  parameter_value_id INT,
  UNIQUE (product_id, parameter_value_id),
  CONSTRAINT fk_product_parameter_values_product FOREIGN KEY (product_id) REFERENCES products(id),
  CONSTRAINT fk_product_parameter_values_value FOREIGN KEY (parameter_value_id) REFERENCES parameter_values(id)
);

CREATE TABLE delivery_methods (
  id SERIAL PRIMARY KEY,
  method_name VARCHAR(100) NOT NULL,
  description TEXT,
  estimated_delivery_days INT,
  cost DECIMAL(10, 2) NOT NULL DEFAULT 0.00
);

CREATE TABLE payment_methods (
  id SERIAL PRIMARY KEY,
  method_name VARCHAR(100) NOT NULL,
  description TEXT,
  fee DECIMAL(10, 2) DEFAULT 0.00
);

CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  delivery_method_id INT,
  payment_method_id INT,
  address_id INT,
  total_amount DECIMAL(10, 2) NOT NULL,
  order_status VARCHAR(50) DEFAULT 'Pending',
  CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id),
  CONSTRAINT fk_orders_delivery FOREIGN KEY (delivery_method_id) REFERENCES delivery_methods(id),
  CONSTRAINT fk_orders_payment FOREIGN KEY (payment_method_id) REFERENCES payment_methods(id),
  CONSTRAINT fk_orders_address FOREIGN KEY (address_id) REFERENCES addresses(id)
);

CREATE TABLE order_items (
  id SERIAL PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  UNIQUE(order_id, product_id),
  CONSTRAINT fk_order_items_order FOREIGN KEY (order_id) REFERENCES orders(id),
  CONSTRAINT fk_order_items_product FOREIGN KEY (product_id) REFERENCES products(id)
);

CREATE TABLE subpages (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  path VARCHAR(255) NOT NULL UNIQUE,
  content TEXT NOT NULL,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE product_lists (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  list_name VARCHAR(100) NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_product_lists_user FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE product_list_items (
  id SERIAL PRIMARY KEY,
  product_list_id INT NOT NULL,
  product_id INT NOT NULL,
  UNIQUE (product_list_id, product_id),
  CONSTRAINT fk_product_list_items_list FOREIGN KEY (product_list_id) REFERENCES product_lists(id),
  CONSTRAINT fk_product_list_items_product FOREIGN KEY (product_id) REFERENCES products(id)
);
